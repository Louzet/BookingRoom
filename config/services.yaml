# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'
    booking_logs: '%kernel.project_dir%/var/bookingLogs'

    public_directory: '%kernel.project_dir%/public'

    image_room_directory: '%public_directory%/image_room_directory'


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Service\FileUploader:
        arguments:
            $targetDirectory: '%image_room_directory%'

    App\Events\:
        resource: '../src/Events'
        tags:
           - {name: monolog.logger, channel: booking_logs}

    ville.transformer:
        class: App\DataTransformer\villeToEntityTransformer

    App\Events\UserEvents\FailLoginSuscriber:
        class: App\Events\UserEvents\FailLoginSuscriber
        arguments: ['@request_stack', '@snc_redis.default']
        tags:
            - { name: kernel.event_subscriber }

    App\Events\UserEvents\PostFailLoginSuscriber:
        class: App\Events\UserEvents\PostFailLoginSuscriber
        arguments: ['@router', '@logger','@snc_redis.default']
        tags:
            - { name: kernel.event_subscriber }
            - { name: controller.service_arguments }

    sonata_professionnal.room_administration:
        class: App\Entity\Sonata_Professionnal\RoomAdministration
        arguments: [~, App\Entity\Room, ~]
        calls:
            - [setLabelTranslatorStrategy, ['@sonata.admin.label.strategy.underscore']]
            - [setVilleTransformer, ['@ville.transformer']]
        tags:
            - { name: sonata.admin, manager_type: orm, group: 'Content', label: 'Room' }

    sonata_professionnal.reservation_administration:
        class: App\Entity\Sonata_Professionnal\ReservationAdministration
        arguments: [~, App\Entity\Reservation, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Reservation }

    App\Events\FullCalendarListener:
        tags:
            - { name: 'kernel.event_listener', event: 'fullcalendar.set_data', method: loadEvents }